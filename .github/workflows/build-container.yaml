name: Build and Push image

on:
  push:
    branches:
      - main
      - staging

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if k8s-only changes
        id: check-k8s-only
        run: |
          # Get list of changed files, handling first push and invalid refs
          if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ] || ! git cat-file -e ${{ github.event.before }} 2>/dev/null; then
            # First push or invalid before ref, build everything
            echo "k8s_only=false" >> $GITHUB_OUTPUT
            echo "First push or invalid before ref, proceeding with build"
          else
            # Get list of changed files
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
            
            if [ -z "$CHANGED_FILES" ]; then
              # No changes, skip build
              echo "k8s_only=true" >> $GITHUB_OUTPUT
              echo "No files changed, skipping build"
            else
              # Check if only k8s/ files were changed
              NON_K8S_FILES=$(echo "$CHANGED_FILES" | grep -v "^k8s/" || true)
              
              if [ -z "$NON_K8S_FILES" ]; then
                echo "k8s_only=true" >> $GITHUB_OUTPUT
                echo "Only k8s/ files changed, skipping build"
              else
                echo "k8s_only=false" >> $GITHUB_OUTPUT
                echo "Non-k8s files changed, proceeding with build"
              fi
            fi
          fi

      - name: Skip build if k8s-only
        if: steps.check-k8s-only.outputs.k8s_only == 'true'
        run: |
          echo "Skipping build - only k8s/ files were modified"
          exit 0

      - name: Set up Python
        if: steps.check-k8s-only.outputs.k8s_only != 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        if: steps.check-k8s-only.outputs.k8s_only != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install ruff

      - name: Run linting
        if: steps.check-k8s-only.outputs.k8s_only != 'true'
        run: |
          ruff check .

      - name: Set up Docker Buildx
        if: steps.check-k8s-only.outputs.k8s_only != 'true'
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        if: steps.check-k8s-only.outputs.k8s_only != 'true'
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Extract metadata for Docker tags
        if: steps.check-k8s-only.outputs.k8s_only != 'true'
        id: meta
        run: |
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/heimdall"
          if [ "${GITHUB_REF##*/}" == "main" ]; then
            COMMIT_HASH=${{ github.sha }}
            TAG1="stable"
            TAG2="$COMMIT_HASH"
          elif [ "${GITHUB_REF##*/}" == "staging" ]; then
            COMMIT_HASH=${{ github.sha }}
            TAG1="latest"
            TAG2="$COMMIT_HASH"
          fi
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "TAG1=$TAG1" >> $GITHUB_ENV
          echo "TAG2=$TAG2" >> $GITHUB_ENV

      - name: Build and Push Docker Image using Buildx
        if: steps.check-k8s-only.outputs.k8s_only != 'true'
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --tag $IMAGE_NAME:$TAG1 \
            --tag $IMAGE_NAME:$TAG2 \
            --push .