name: Generate OpenAPI Specification

on:
  push:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'pyproject.toml'
      - 'scripts/generate_openapi.py'
  pull_request:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'pyproject.toml'
      - 'scripts/generate_openapi.py'
  workflow_dispatch:
    inputs:
      path_prefix:
        description: 'API path prefix (default: /heimdall-admin)'
        required: false
        type: string
        default: '/heimdall-admin'

jobs:
  generate-openapi:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv sync --frozen

    - name: Generate OpenAPI specification
      run: |
        # Determine path prefix
        PATH_PREFIX="${{ github.event.inputs.path_prefix }}"
        
        if [ -z "$PATH_PREFIX" ]; then
          PATH_PREFIX="/heimdall-admin"
        fi
        
        echo "Generating OpenAPI spec with:"
        echo "  Path Prefix: ${PATH_PREFIX}"
        echo "  Production Server: https://services.pref.rio${PATH_PREFIX}"
        echo "  Staging Server: https://services.staging.app.dados.rio${PATH_PREFIX}"
        
        # Generate OpenAPI spec
        mkdir -p docs/api
        
        # Generate JSON version
        uv run python scripts/generate_openapi.py \
          --path-prefix "$PATH_PREFIX" \
          --output "docs/api/openapi.json" \
          --format json
        
        # Generate YAML version (if PyYAML is available)
        uv run python scripts/generate_openapi.py \
          --path-prefix "$PATH_PREFIX" \
          --output "docs/api/openapi.yaml" \
          --format yaml || echo "YAML generation skipped (PyYAML not available)"

    - name: Generate API documentation
      run: |
        # Create a simple README for the API docs
        cat > docs/api/README.md << 'EOF'
        # Heimdall Admin Service API Documentation

        This directory contains the auto-generated OpenAPI specification for the Heimdall Admin Service.

        ## Files

        - `openapi.json` - OpenAPI 3.0 specification in JSON format
        - `openapi.yaml` - OpenAPI 3.0 specification in YAML format (if available)

        ## Usage

        You can use these files with various tools:

        ### Swagger UI
        Visit [Swagger Editor](https://editor.swagger.io/) and import the `openapi.json` or `openapi.yaml` file.

        ### Postman
        Import the `openapi.json` file into Postman to generate a collection.

        ### Code Generation
        Use tools like `openapi-generator` to generate client SDKs:

        ```bash
        # Generate Python client
        openapi-generator generate -i openapi.json -g python -o clients/python

        # Generate TypeScript client
        openapi-generator generate -i openapi.json -g typescript-fetch -o clients/typescript

        # Generate Go client
        openapi-generator generate -i openapi.json -g go -o clients/go
        ```

        ## Live Documentation

        When the service is running, you can access the interactive documentation at:
        - Swagger UI: `/docs`
        - ReDoc: `/redoc`

        ## Last Updated

        This specification was last updated on: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        Generated from commit: ${{ github.sha }}
        
        ## Servers
        
        - **Production**: https://services.pref.rio${PATH_PREFIX}
        - **Staging**: https://services.staging.app.dados.rio${PATH_PREFIX}
        EOF

    - name: Check for changes
      id: changes
      run: |
        # Check if docs/api directory exists and has any tracked files
        if [ ! -d "docs/api" ] || [ -z "$(ls -A docs/api 2>/dev/null)" ]; then
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "OpenAPI documentation directory does not exist or is empty - creating initial files"
        elif git diff --quiet docs/api/; then
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "No changes detected in OpenAPI specification"
        else
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "Changes detected in OpenAPI specification"
        fi

    - name: Commit and push changes
      if: steps.changes.outputs.changes == 'true' && github.event_name == 'push'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add docs/api/
        git commit -m "docs: update OpenAPI specification

        Auto-generated from commit ${{ github.sha }}
        Branch: ${{ github.ref_name }}
        
        🤖 Generated by GitHub Actions"
        
        git push

    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request' && steps.changes.outputs.changes == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `## 🔄 OpenAPI Specification Updated
          
          The OpenAPI specification has been regenerated based on the changes in this PR.
          
          📁 **Generated files:**
          - \`docs/api/openapi.json\` - JSON format
          - \`docs/api/openapi.yaml\` - YAML format (if available)
          - \`docs/api/README.md\` - Documentation
          
          🔗 **Access the specification:**
          - View directly in the repository after merge: [\`docs/api/openapi.json\`](https://raw.githubusercontent.com/${{ github.repository }}/main/docs/api/openapi.json)
          - Import into [Swagger Editor](https://editor.swagger.io/)
          
          > 🤖 This comment was generated automatically by the OpenAPI generation workflow.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          })