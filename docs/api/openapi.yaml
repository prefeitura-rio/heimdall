openapi: 3.1.0
info:
  title: Heimdall Admin Service
  description: '# Heimdall Admin Service API


    A comprehensive admin service for user and group management with authorization
    powered by Cerbos.


    ## Features


    - **User Management**: Automatic user creation from JWT tokens with role-based
    access control

    - **Group Management**: Create, manage, and assign users to groups with hierarchical
    permissions

    - **Role Management**: Define and assign roles to users and groups

    - **Mapping Management**: Configure API endpoint to action mappings for authorization

    - **Action Management**: Define available actions for fine-grained permission
    control

    - **Cerbos Integration**: Policy-based authorization with external Cerbos service

    - **Audit Logging**: Comprehensive audit trail for all administrative operations

    - **Redis Caching**: High-performance caching for frequently accessed data'
  version: 1.0.0
paths:
  /api/v1/healthz:
    get:
      tags:
      - health
      - health
      summary: Health check
      description: Basic health check endpoint that returns 200 if the service is
        running.
      operationId: health_check_api_v1_healthz_get
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                additionalProperties: true
                type: object
                title: Response Health Check Api V1 Healthz Get
              example:
                status: healthy
                service: heimdall-admin-service
                timestamp: '2024-01-01T12:00:00.000Z'
  /api/v1/readyz:
    get:
      tags:
      - health
      - health
      summary: Readiness check
      description: 'Comprehensive readiness check that verifies all system dependencies
        are available.


        **Dependencies Checked**:

        - Database connectivity

        - Redis cache connectivity

        - Cerbos authorization service connectivity


        **Use Cases**:

        - Kubernetes readiness probes

        - Load balancer health checks

        - Service mesh health verification

        - Deployment validation'
      operationId: readiness_check_api_v1_readyz_get
      responses:
        '200':
          description: Service is ready and all dependencies are healthy
          content:
            application/json:
              schema:
                additionalProperties: true
                type: object
                title: Response Readiness Check Api V1 Readyz Get
              example:
                status: ready
                service: heimdall-admin-service
                timestamp: '2024-01-01T12:00:00.000Z'
                dependencies:
                  database: healthy
                  redis: healthy
                  cerbos: healthy
        '503':
          description: Service unavailable - one or more dependencies are unhealthy
          content:
            application/json:
              example:
                status: not_ready
                service: heimdall-admin-service
                timestamp: '2024-01-01T12:00:00.000Z'
                dependencies:
                  database: healthy
                  redis: unhealthy
                  cerbos: healthy
                errors:
                - 'Redis connection failed: Connection refused'
  /api/v1/cerbos-policy-template:
    get:
      tags:
      - health
      - health
      summary: Get Cerbos superadmin policy template
      description: 'Get the Cerbos policy template for granting superadmin permissions.


        This endpoint provides the policy configuration that should be applied to
        Cerbos

        when the admin API is disabled and manual policy configuration is required.


        **Use Case**: When Heimdall cannot automatically create the superadmin policy

        (e.g., Cerbos admin API is disabled), use this template to manually configure

        the policy in your Cerbos deployment.


        **Instructions**:

        1. Get the policy template from this endpoint

        2. Save it as a YAML or JSON file in your Cerbos configuration

        3. Apply it via your Cerbos deployment method (ConfigMap, file system, etc.)'
      operationId: get_cerbos_policy_template_api_v1_cerbos_policy_template_get
      responses:
        '200':
          description: Cerbos policy template retrieved successfully
          content:
            application/json:
              schema: {}
              example:
                apiVersion: api.cerbos.dev/v1
                kind: RolePolicy
                metadata:
                  storeIdentifier: role_superadmin
                rolePolicy:
                  role: superadmin
                  version: default
                  rules:
                  - resource: '*'
                    actions:
                    - action: '*'
                      effect: EFFECT_ALLOW
  /api/v1/users/me:
    get:
      tags:
      - users
      summary: Get current user information
      description: 'Retrieve detailed information about the currently authenticated
        user based on their JWT token.


        **Authentication**: Uses the JWT token to automatically identify the user
        by their CPF

        from the `preferred_username` field in the Keycloak token.


        **Auto-Retrieval**: No need to specify the CPF - it''s automatically extracted
        from the JWT token.


        **Auto-Creation**: If the user doesn''t exist in the system, they are automatically
        created

        during the authentication process.


        **Role Aggregation**: The response includes both direct roles assigned to
        the user and

        roles inherited through group memberships.


        **Use Cases**:

        - User profile display in self-service applications

        - Current user context for frontend applications

        - Session management and user state tracking

        - Self-service user information retrieval

        - Profile settings and preferences display


        **Security**: Only returns information about the authenticated user - no access
        to other users'' data.'
      operationId: get_current_user_info_api_v1_users_me_get
      responses:
        '200':
          description: Current user information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
              example:
                id: 1
                cpf: '12345678901'
                display_name: "Jo\xE3o Silva"
                groups:
                - engineering_team:backend
                - data_analysts:read
                roles:
                - superadmin
                - data_analyst:read
        '401':
          description: Unauthorized - Invalid or missing JWT token
          content:
            application/json:
              example:
                detail: Could not validate credentials
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                detail: 'Failed to retrieve user information: Database connection
                  error'
      security:
      - HTTPBearer: []
  /api/v1/users/{cpf}:
    get:
      tags:
      - users
      summary: Get user by CPF
      description: "Retrieve detailed information about a user by their CPF (Brazilian\
        \ tax ID).\n\n**User Identification**: Users are identified by their CPF (Cadastro\
        \ de Pessoa F\xEDsica),\nwhich is extracted from the `preferred_username`\
        \ field in Keycloak JWT tokens.\n\n**Authorization**: All authenticated users\
        \ can retrieve user information.\n\n**Auto-Creation**: Users are automatically\
        \ created when they first authenticate with a valid JWT token.\n\n**Role Aggregation**:\
        \ The response includes both direct roles assigned to the user and\nroles\
        \ inherited through group memberships.\n\n**Use Cases**:\n- User profile display\
        \ in applications\n- Administrative user management\n- Role and permission\
        \ verification\n- Group membership tracking\n- Integration with external systems\
        \ requiring user data"
      operationId: get_user_by_cpf_api_v1_users__cpf__get
      security:
      - HTTPBearer: []
      parameters:
      - name: cpf
        in: path
        required: true
        schema:
          type: string
          title: Cpf
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
              example:
                id: 1
                cpf: '12345678901'
                display_name: "Jo\xE3o Silva"
                groups:
                - engineering_team:backend
                - data_analysts:read
                roles:
                - superadmin
                - data-analyst
        '401':
          description: Unauthorized - Invalid or missing JWT token
          content:
            application/json:
              example:
                detail: Could not validate credentials
        '404':
          description: User not found - CPF does not exist in the system
          content:
            application/json:
              example:
                detail: User with CPF '12345678901' not found
        '422':
          description: Validation error - Invalid CPF format
          content:
            application/json:
              example:
                detail: Validation error
                errors:
                - loc:
                  - path
                  - cpf
                  msg: string does not match regex
                  type: value_error.regex
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                detail: An unexpected error occurred while retrieving user information
  /api/v1/groups/:
    post:
      tags:
      - groups
      summary: Create a new group
      description: 'Create a new group in the system.


        **Authorization Required**: Users must have permission to create groups via
        Cerbos policies.


        **Notes**:

        - Group names must be unique across the system

        - Names can only contain alphanumeric characters, hyphens, and underscores

        - The creating user becomes the group owner

        - Group creation is audited and logged


        **Common Use Cases**:

        - Creating departmental groups (e.g., "engineering", "marketing")

        - Setting up project teams with specific access requirements

        - Organizing users by geographical location or business unit'
      operationId: create_group_api_v1_groups__post
      security:
      - HTTPBearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreateRequest'
      responses:
        '201':
          description: Group created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupResponse'
              example:
                id: 1
                name: engineering_team:backend
                description: Engineering team with access to development resources
                created_by: '12345678901'
                created_at: '2024-01-15T10:30:00Z'
        '400':
          description: Bad request - Invalid input data
          content:
            application/json:
              example:
                detail: Group name contains invalid characters
        '401':
          description: Unauthorized - Invalid or missing JWT token
          content:
            application/json:
              example:
                detail: Could not validate credentials
        '403':
          description: Forbidden - Insufficient permissions to create groups
          content:
            application/json:
              example:
                detail: Permission denied to create group 'engineering_team:backend'
        '409':
          description: Conflict - Group with this name already exists
          content:
            application/json:
              example:
                detail: Group with name 'engineering_team:backend' already exists
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                detail: An unexpected error occurred while creating the group
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    get:
      tags:
      - groups
      summary: List all groups
      description: 'List all groups in the system with optional filtering.


        **Filtering**: Use the `prefix` query parameter to filter groups by name prefix.


        **Authorization**: All authenticated users can list groups.


        **Performance**: Results are cached for optimal performance. Large result
        sets

        may be paginated in future versions.


        **Use Cases**:

        - Display all available groups in admin interfaces

        - Search for specific groups by name prefix

        - Export group information for reporting'
      operationId: list_groups_api_v1_groups__get
      security:
      - HTTPBearer: []
      parameters:
      - name: prefix
        in: query
        required: false
        schema:
          anyOf:
          - type: string
          - type: 'null'
          description: Filter groups by name prefix (case-insensitive)
          title: Prefix
        description: Filter groups by name prefix (case-insensitive)
        example: eng
      responses:
        '200':
          description: List of groups retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupResponse'
                title: Response List Groups Api V1 Groups  Get
              example:
              - id: 1
                name: engineering_team:backend
                description: Engineering team with access to development resources
                created_by: '12345678901'
                created_at: '2024-01-15T10:30:00Z'
              - id: 2
                name: marketing_team:frontend
                description: Marketing team for campaign management
                created_by: '98765432109'
                created_at: '2024-01-16T14:20:00Z'
        '401':
          description: Unauthorized - Invalid or missing JWT token
          content:
            application/json:
              example:
                detail: Could not validate credentials
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                detail: An unexpected error occurred while retrieving groups
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/groups/{group_name}:
    delete:
      tags:
      - groups
      summary: Delete a group
      description: 'Delete a group from the system with cascading cleanup.


        **Authorization**: Users can delete groups they have permission to manage.

        Permissions are checked via Cerbos policies.


        **Cascade Effects**:

        - Removes all group members

        - Removes all role assignments from the group

        - Updates Cerbos policies to reflect the group deletion


        **Use Cases**:

        - Remove obsolete or unused groups

        - Administrative group cleanup

        - System reorganization


        **Safety**: Group deletion is irreversible. Ensure the group is no longer
        needed before deletion.'
      operationId: delete_group_api_v1_groups__group_name__delete
      security:
      - HTTPBearer: []
      parameters:
      - name: group_name
        in: path
        required: true
        schema:
          type: string
          title: Group Name
      responses:
        '204':
          description: Group deleted successfully
        '401':
          description: Unauthorized - Invalid or missing JWT token
          content:
            application/json:
              example:
                error: Invalid authentication credentials
                status_code: 401
        '403':
          description: Forbidden - Insufficient permissions to delete group
          content:
            application/json:
              example:
                detail: Permission denied to delete group 'engineering_team'
        '404':
          description: Group not found
          content:
            application/json:
              example:
                detail: Group 'unknown-group' not found
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                detail: 'Failed to delete group: Database transaction error'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/groups/{group_name}/members:
    get:
      tags:
      - memberships
      summary: List group members
      description: 'List all members of a specific group with their membership details.


        **Authorization**: Users can view members of groups they have permission to
        access.

        Permissions are checked via Cerbos policies.


        **Member Information**: Returns each member''s CPF, display name (if available),

        join timestamp, and who added them to the group.


        **Use Cases**:

        - View team composition

        - Audit group membership

        - Administrative oversight

        - Access control verification


        **Sorting**: Members are returned sorted by join date (newest first).'
      operationId: list_group_members_api_v1_groups__group_name__members_get
      security:
      - HTTPBearer: []
      parameters:
      - name: group_name
        in: path
        required: true
        schema:
          type: string
          title: Group Name
      responses:
        '200':
          description: List of group members retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupMemberResponse'
                title: Response List Group Members Api V1 Groups  Group Name  Members
                  Get
              example:
              - subject: '12345678901'
                display_name: "Jo\xE3o Silva"
                joined_at: '2024-01-15T10:30:00Z'
                added_by: '98765432109'
              - subject: '23456789012'
                display_name: Maria Santos
                joined_at: '2024-01-10T09:15:00Z'
                added_by: '98765432109'
        '401':
          description: Unauthorized - Invalid or missing JWT token
          content:
            application/json:
              example:
                detail: Could not validate credentials
        '403':
          description: Forbidden - Insufficient permissions to view group members
          content:
            application/json:
              example:
                detail: Permission denied to view members of group 'engineering_team:backend'
        '404':
          description: Group not found
          content:
            application/json:
              example:
                detail: Group 'unknown-group' not found
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                detail: 'Failed to retrieve group members: Database connection error'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
      - memberships
      summary: Add member to group
      description: 'Add a user to a group with automatic user creation and authorization
        checks.


        **Authorization**: Users can add members to groups they have permission to
        manage.

        Permissions are checked via Cerbos policies.


        **Auto-Creation**: If the user being added doesn''t exist in the system, they
        will

        be automatically created with their CPF as the identifier.


        **Member Identification**: Users are identified by their CPF (Brazilian tax
        ID),

        which serves as the unique subject identifier.


        **Use Cases**:

        - Add team members to project groups

        - Grant users access to specific resources

        - Administrative user management

        - Bulk user provisioning workflows


        **Role Inheritance**: Users automatically inherit all roles assigned to groups

        they''re members of.'
      operationId: add_member_to_group_api_v1_groups__group_name__members_post
      security:
      - HTTPBearer: []
      parameters:
      - name: group_name
        in: path
        required: true
        schema:
          type: string
          title: Group Name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddMemberRequest'
      responses:
        '200':
          description: Member added to group successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MembershipResponse'
              example:
                status: member_added
                group: engineering_team:backend
                subject: '12345678901'
        '400':
          description: Bad request - Invalid CPF format or user already in group
          content:
            application/json:
              example:
                detail: User is already a member of this group
        '401':
          description: Unauthorized - Invalid or missing JWT token
          content:
            application/json:
              example:
                detail: Could not validate credentials
        '403':
          description: Forbidden - Insufficient permissions to add members to this
            group
          content:
            application/json:
              example:
                detail: Permission denied to add member to group 'engineering_team:backend'
        '404':
          description: Group not found
          content:
            application/json:
              example:
                detail: Group 'unknown-group' not found
        '422':
          description: Validation error - Invalid CPF format
          content:
            application/json:
              example:
                detail: Validation error
                errors:
                - loc:
                  - body
                  - subject
                  msg: string does not match regex
                  type: value_error.regex
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                detail: 'Failed to add member: Database connection error'
  /api/v1/groups/{group_name}/members/{subject}:
    delete:
      tags:
      - memberships
      summary: Remove member from group
      description: 'Remove a user from a group, revoking their access to group-based
        permissions.


        **Authorization**: Users can remove members from groups they have permission
        to manage.

        Permissions are checked via Cerbos policies.


        **Member Identification**: Users are identified by their CPF (Brazilian tax
        ID).


        **Impact**: Removing a user from a group will revoke all roles and permissions

        they inherited through that group membership.


        **Use Cases**:

        - Remove users who no longer need access

        - Administrative user management

        - Security incidents requiring immediate access revocation

        - Team restructuring


        **Cache Invalidation**: User role caches are automatically invalidated to
        ensure

        immediate effect of permission changes.'
      operationId: remove_member_from_group_api_v1_groups__group_name__members__subject__delete
      security:
      - HTTPBearer: []
      parameters:
      - name: group_name
        in: path
        required: true
        schema:
          type: string
          title: Group Name
      - name: subject
        in: path
        required: true
        schema:
          type: string
          title: Subject
      responses:
        '204':
          description: Member removed from group successfully
        '400':
          description: Bad request - User not a member of the group
          content:
            application/json:
              example:
                detail: User is not a member of this group
        '401':
          description: Unauthorized - Invalid or missing JWT token
          content:
            application/json:
              example:
                detail: Could not validate credentials
        '403':
          description: Forbidden - Insufficient permissions to remove members from
            this group
          content:
            application/json:
              example:
                detail: Permission denied to remove member from group 'engineering_team:backend'
        '404':
          description: Group or user not found
          content:
            application/json:
              example:
                detail: Group 'unknown-group' not found
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                detail: 'Failed to remove member: Database connection error'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/roles/:
    post:
      tags:
      - roles
      summary: Create Role
      description: 'Create a role (admin-only).

        Implements POST /roles as specified in SPEC.md Section 3.4.'
      operationId: create_role_api_v1_roles__post
      security:
      - HTTPBearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleCreateRequest'
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    get:
      tags:
      - roles
      summary: List all roles
      description: 'List all roles available in the system.


        **Authorization**: All authenticated users can list roles.


        **Pagination**: Use `skip` and `limit` parameters to control pagination.

        Maximum limit is 100 roles per request.


        **Use Cases**:

        - Display available roles in user interfaces

        - Role selection during group or user management

        - Administrative overview of system roles

        - Integration with external systems requiring role information


        **System Roles**: The system includes built-in roles like `superadmin` which
        cannot be deleted.'
      operationId: list_roles_api_v1_roles__get
      security:
      - HTTPBearer: []
      parameters:
      - name: skip
        in: query
        required: false
        schema:
          type: integer
          minimum: 0
          description: Number of items to skip
          default: 0
          title: Skip
        description: Number of items to skip
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          maximum: 100
          minimum: 1
          description: Maximum number of items to return
          default: 50
          title: Limit
        description: Maximum number of items to return
      responses:
        '200':
          description: List of roles retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse_RoleResponse_'
              example:
                items:
                - id: 1
                  name: superadmin
                  description: Super administrator with full system access
                - id: 2
                  name: data_analyst:read
                  description: Data analysts with read access to analytics dashboards
                  created_by: '12345678901'
                  created_at: '2024-01-15T10:30:00Z'
                total: 25
                skip: 0
                limit: 50
                has_more: false
        '401':
          description: Unauthorized - Invalid or missing JWT token
          content:
            application/json:
              example:
                detail: Could not validate credentials
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                detail: An unexpected error occurred while retrieving roles
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/roles/groups/{group_name}/roles:
    get:
      tags:
      - roles
      summary: List roles assigned to a group
      description: 'List all roles assigned to a specific group.


        **Authorization**: Users can view roles of groups they have permission to
        access.

        Permissions are checked via Cerbos policies.


        **Role Information**: Returns each role''s ID, name, and description.


        **Use Cases**:

        - View group permissions and capabilities

        - Audit group role assignments

        - Administrative oversight of access control

        - Verify role inheritance for group members


        **Sorting**: Roles are returned sorted by name (alphabetical order).'
      operationId: list_group_roles_api_v1_roles_groups__group_name__roles_get
      security:
      - HTTPBearer: []
      parameters:
      - name: group_name
        in: path
        required: true
        schema:
          type: string
          title: Group Name
      responses:
        '200':
          description: List of group roles retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleResponse'
                title: Response List Group Roles Api V1 Roles Groups  Group Name  Roles
                  Get
              example:
              - id: 1
                name: data_analyst:read
                description: Data analysis and reporting access
              - id: 2
                name: team_lead:manage
                description: Team leadership and management permissions
        '401':
          description: Unauthorized - Invalid or missing JWT token
          content:
            application/json:
              example:
                detail: Could not validate credentials
        '403':
          description: Forbidden - Insufficient permissions to view group roles
          content:
            application/json:
              example:
                detail: Permission denied to view roles of group 'engineering_team:backend'
        '404':
          description: Group not found
          content:
            application/json:
              example:
                detail: Group 'unknown-group' not found
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                detail: 'Failed to retrieve group roles: Database connection error'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
      - roles
      summary: Assign Role To Group
      description: 'Assign role to group.

        Implements POST /groups/{groupName}/roles as specified in SPEC.md Section
        3.4.'
      operationId: assign_role_to_group_api_v1_roles_groups__group_name__roles_post
      security:
      - HTTPBearer: []
      parameters:
      - name: group_name
        in: path
        required: true
        schema:
          type: string
          title: Group Name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleAssignRequest'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleAssignmentResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/roles/groups/{group_name}/roles/{role_name}:
    delete:
      tags:
      - roles
      summary: Remove Role From Group
      description: 'Remove role from group.

        Implements DELETE /groups/{groupName}/roles/{roleName} as specified in SPEC.md
        Section 3.4.'
      operationId: remove_role_from_group_api_v1_roles_groups__group_name__roles__role_name__delete
      security:
      - HTTPBearer: []
      parameters:
      - name: group_name
        in: path
        required: true
        schema:
          type: string
          title: Group Name
      - name: role_name
        in: path
        required: true
        schema:
          type: string
          title: Role Name
      responses:
        '204':
          description: Successful Response
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/roles/{role_name}/actions:
    get:
      tags:
      - roles
      summary: List actions allowed for a role
      description: 'List all actions that a specific role can perform.


        **Authorization**: Users can view actions for roles they have permission to
        access.

        Permissions are checked via Cerbos policies.


        **Action Information**: Returns each action''s ID, name, and description.


        **Use Cases**:

        - Audit role permissions and capabilities

        - Verify role-based access control configuration

        - Administrative oversight of security policies

        - Integration with external systems requiring permission information


        **Sorting**: Actions are returned sorted by name (alphabetical order).


        **Note**: This endpoint returns actions based on current Cerbos policy configuration.'
      operationId: list_role_actions_api_v1_roles__role_name__actions_get
      security:
      - HTTPBearer: []
      parameters:
      - name: role_name
        in: path
        required: true
        schema:
          type: string
          title: Role Name
      responses:
        '200':
          description: List of role actions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/app__routers__roles__ActionResponse'
                title: Response List Role Actions Api V1 Roles  Role Name  Actions
                  Get
              example:
              - id: 1
                name: user:read
                description: Read user information
              - id: 2
                name: user:list
                description: List users in the system
        '401':
          description: Unauthorized - Invalid or missing JWT token
          content:
            application/json:
              example:
                detail: Could not validate credentials
        '403':
          description: Forbidden - Insufficient permissions to view role actions
          content:
            application/json:
              example:
                detail: Permission denied to view actions for role 'data_analyst:read'
        '404':
          description: Role not found
          content:
            application/json:
              example:
                detail: Role 'unknown-role' not found
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                detail: 'Failed to retrieve role actions: Policy service error'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
      - roles
      summary: Add action permission to a role
      description: 'Grant a specific action permission to a role.


        **Authorization**: Users can modify role permissions they have access to manage.

        Permissions are checked via Cerbos policies.


        **Action Assignment**: Adds the specified action to the role''s allowed permissions.


        **Use Cases**:

        - Grant new permissions to existing roles

        - Administrative role management

        - Dynamic permission assignment

        - Security policy updates


        **Policy Updates**: Changes are propagated to Cerbos policy engine for immediate
        effect.


        **Note**: This endpoint manages role permissions through Cerbos policy configuration.'
      operationId: assign_action_to_role_api_v1_roles__role_name__actions_post
      security:
      - HTTPBearer: []
      parameters:
      - name: role_name
        in: path
        required: true
        schema:
          type: string
          title: Role Name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleActionRequest'
      responses:
        '200':
          description: Action permission added to role successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleActionResponse'
              example:
                status: action_assigned
                role: data_analyst:read
                action: user:read
        '400':
          description: Bad request - Invalid action name or role already has permission
          content:
            application/json:
              example:
                detail: Role already has permission for this action
        '401':
          description: Unauthorized - Invalid or missing JWT token
          content:
            application/json:
              example:
                detail: Could not validate credentials
        '403':
          description: Forbidden - Insufficient permissions to modify role actions
          content:
            application/json:
              example:
                detail: Permission denied to modify actions for role 'data_analyst:read'
        '404':
          description: Role or action not found
          content:
            application/json:
              example:
                detail: Role 'unknown-role' not found
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                detail: 'Failed to assign action to role: Policy service error'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/roles/{role_name}/actions/{action_name}:
    delete:
      tags:
      - roles
      summary: Remove action permission from a role
      description: 'Revoke a specific action permission from a role.


        **Authorization**: Users can modify role permissions they have access to manage.

        Permissions are checked via Cerbos policies.


        **Action Removal**: Removes the specified action from the role''s allowed
        permissions.


        **Use Cases**:

        - Revoke unnecessary permissions from roles

        - Administrative role management

        - Security incident response

        - Policy tightening and least-privilege enforcement


        **Policy Updates**: Changes are propagated to Cerbos policy engine for immediate
        effect.


        **Note**: This endpoint manages role permissions through Cerbos policy configuration.'
      operationId: remove_action_from_role_api_v1_roles__role_name__actions__action_name__delete
      security:
      - HTTPBearer: []
      parameters:
      - name: role_name
        in: path
        required: true
        schema:
          type: string
          title: Role Name
      - name: action_name
        in: path
        required: true
        schema:
          type: string
          title: Action Name
      responses:
        '204':
          description: Action permission removed from role successfully
        '400':
          description: Bad request - Role doesn't have this action permission
          content:
            application/json:
              example:
                detail: Role doesn't have permission for this action
        '401':
          description: Unauthorized - Invalid or missing JWT token
          content:
            application/json:
              example:
                detail: Could not validate credentials
        '403':
          description: Forbidden - Insufficient permissions to modify role actions
          content:
            application/json:
              example:
                detail: Permission denied to modify actions for role 'data_analyst:read'
        '404':
          description: Role or action not found
          content:
            application/json:
              example:
                detail: Role 'unknown-role' not found
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                detail: 'Failed to remove action from role: Policy service error'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/roles/{role_name}:
    delete:
      tags:
      - roles
      summary: Delete a role
      description: 'Delete a role from the system.


        **Authorization**: Users can delete roles they have permission to manage.

        Permissions are checked via Cerbos policies.


        **Cascade Effects**:

        - Removes the role from all groups that have it assigned

        - Removes all action permissions associated with the role

        - Updates Cerbos policies to reflect the role deletion


        **Use Cases**:

        - Remove obsolete or unused roles

        - Administrative role cleanup

        - Security compliance and role minimization

        - System reorganization


        **Safety**: Role deletion is irreversible. Ensure the role is no longer needed
        before deletion.'
      operationId: delete_role_api_v1_roles__role_name__delete
      security:
      - HTTPBearer: []
      parameters:
      - name: role_name
        in: path
        required: true
        schema:
          type: string
          title: Role Name
      responses:
        '204':
          description: Role deleted successfully
        '403':
          description: Forbidden - Insufficient permissions to delete role
          content:
            application/json:
              example:
                detail: Permission denied to delete role 'data_analyst:read'
        '404':
          description: Role not found
          content:
            application/json:
              example:
                detail: Role 'unknown-role' not found
        '409':
          description: Conflict - Role is still in use
          content:
            application/json:
              example:
                detail: 'Cannot delete role ''superadmin'': still assigned to 3 groups'
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                detail: 'Failed to delete role: Database transaction error'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/actions/:
    post:
      tags:
      - actions
      summary: Create a new action
      description: 'Create a new action that can be used in authorization policies
        and endpoint mappings.


        **Actions**: Define granular permissions available in the system. Examples
        include

        `user:read`, `group:create`, `data:export`, etc.


        **Authorization**: Requires admin privileges to create actions.


        **Naming Convention**: Use colon-separated format like `resource:operation`

        (e.g., `user:read`, `group:create`, `data:export`).


        **Use Cases**:

        - Define new permissions for application features

        - Create fine-grained access controls

        - Integrate with external authorization systems

        - Map API endpoints to specific actions


        **Endpoint Mapping**: Actions can be mapped to API endpoints using the mappings
        API.'
      operationId: create_action_api_v1_actions__post
      security:
      - HTTPBearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionCreateRequest'
      responses:
        '201':
          description: Action created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__routers__actions__ActionResponse'
              example:
                id: 1
                name: user:read
                description: Read user information
                endpoint_count: 0
        '400':
          description: Bad request - Invalid input data or duplicate action name
          content:
            application/json:
              example:
                detail: Action with name 'user:read' already exists
        '401':
          description: Unauthorized - Invalid or missing JWT token
          content:
            application/json:
              example:
                detail: Could not validate credentials
        '403':
          description: Forbidden - Insufficient permissions to create actions
          content:
            application/json:
              example:
                detail: Insufficient permissions to create actions
        '422':
          description: Validation error - Invalid action data format
          content:
            application/json:
              example:
                detail: Validation error
                errors:
                - loc:
                  - body
                  - name
                  msg: string does not match regex
                  type: value_error.regex
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                detail: 'Failed to create action: Database connection error'
    get:
      tags:
      - actions
      summary: List all actions
      description: 'Retrieve a paginated list of all actions available in the system.


        **Authorization**: All authenticated users can list actions.


        **Pagination**: Use `skip` and `limit` parameters to control pagination.

        Maximum limit is 100 actions per request.


        **Action Information**: Each action includes its name, description, and the

        number of API endpoints currently mapped to it.


        **Use Cases**:

        - Display available actions in administrative interfaces

        - Integration with external authorization systems

        - Action selection during endpoint mapping configuration

        - Audit and compliance reporting

        - Permission management workflows'
      operationId: list_actions_api_v1_actions__get
      security:
      - HTTPBearer: []
      parameters:
      - name: skip
        in: query
        required: false
        schema:
          type: integer
          minimum: 0
          description: Number of actions to skip (pagination offset)
          default: 0
          title: Skip
        description: Number of actions to skip (pagination offset)
        example: 0
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          maximum: 100
          minimum: 1
          description: Maximum number of actions to return
          default: 50
          title: Limit
        description: Maximum number of actions to return
        example: 50
      responses:
        '200':
          description: Actions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionListResponse'
              example:
                actions:
                - id: 1
                  name: user:read
                  description: Read user information
                  endpoint_count: 3
                - id: 2
                  name: group:create
                  description: Create new groups
                  endpoint_count: 1
                total: 25
                skip: 0
                limit: 50
        '401':
          description: Unauthorized - Invalid or missing JWT token
          content:
            application/json:
              example:
                detail: Could not validate credentials
        '422':
          description: Validation error - Invalid pagination parameters
          content:
            application/json:
              example:
                detail: Validation error
                errors:
                - loc:
                  - query
                  - limit
                  msg: ensure this value is less than or equal to 100
                  type: value_error.number.not_le
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                detail: 'Failed to list actions: Database connection error'
  /api/v1/actions/{action_id}:
    get:
      tags:
      - actions
      summary: Get action by ID
      description: 'Retrieve detailed information about a specific action by its ID.


        **Authorization**: All authenticated users can read action information.


        **Action Details**: Returns the action''s name, description, and number of

        API endpoints currently mapped to this action.


        **Use Cases**:

        - Display action details in administrative interfaces

        - Validate action existence before creating mappings

        - Integration with external systems

        - Audit and compliance workflows'
      operationId: get_action_api_v1_actions__action_id__get
      security:
      - HTTPBearer: []
      parameters:
      - name: action_id
        in: path
        required: true
        schema:
          type: integer
          title: Action Id
      responses:
        '200':
          description: Action information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__routers__actions__ActionResponse'
              example:
                id: 1
                name: user:read
                description: Read user information
                endpoint_count: 3
        '401':
          description: Unauthorized - Invalid or missing JWT token
          content:
            application/json:
              example:
                detail: Could not validate credentials
        '404':
          description: Action not found
          content:
            application/json:
              example:
                detail: Action with ID 999 not found
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                detail: 'Failed to get action: Database connection error'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    put:
      tags:
      - actions
      summary: Update action
      description: 'Update an existing action''s name and/or description.


        **Authorization**: Requires admin privileges to update actions.


        **Partial Updates**: You can update just the name, just the description, or
        both.

        Provide only the fields you want to update.


        **Impact**: Updating an action name may affect existing endpoint mappings
        and

        authorization policies that reference this action.


        **Use Cases**:

        - Refine action descriptions for better clarity

        - Rename actions to follow updated naming conventions

        - Administrative maintenance of the action catalog'
      operationId: update_action_api_v1_actions__action_id__put
      security:
      - HTTPBearer: []
      parameters:
      - name: action_id
        in: path
        required: true
        schema:
          type: integer
          title: Action Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionUpdateRequest'
      responses:
        '200':
          description: Action updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__routers__actions__ActionResponse'
              example:
                id: 1
                name: user:read
                description: Read user information and profile data
                endpoint_count: 3
        '400':
          description: Bad request - Invalid input data or duplicate action name
          content:
            application/json:
              example:
                detail: Action with name 'user:read' already exists
        '401':
          description: Unauthorized - Invalid or missing JWT token
          content:
            application/json:
              example:
                detail: Could not validate credentials
        '403':
          description: Forbidden - Insufficient permissions to update actions
          content:
            application/json:
              example:
                detail: Insufficient permissions to update actions
        '404':
          description: Action not found
          content:
            application/json:
              example:
                detail: Action with ID 999 not found
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                detail: 'Failed to update action: Database connection error'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
      - actions
      summary: Delete action
      description: 'Delete an action from the system.


        **Authorization**: Requires admin privileges to delete actions.


        **Impact**: Deleting an action will also remove all endpoint mappings that

        reference this action. This may affect authorization policies.


        **Cascading Deletion**: The system will automatically clean up related

        mappings and update authorization policies.


        **Use Cases**:

        - Remove obsolete actions

        - Clean up unused permissions

        - Administrative maintenance of the action catalog


        **Warning**: This operation cannot be undone. Ensure the action is no longer

        needed before deletion.'
      operationId: delete_action_api_v1_actions__action_id__delete
      security:
      - HTTPBearer: []
      parameters:
      - name: action_id
        in: path
        required: true
        schema:
          type: integer
          title: Action Id
      responses:
        '204':
          description: Action deleted successfully
        '400':
          description: Bad request - Action cannot be deleted (e.g., still in use)
          content:
            application/json:
              example:
                detail: 'Cannot delete action: still referenced by active mappings'
        '401':
          description: Unauthorized - Invalid or missing JWT token
          content:
            application/json:
              example:
                detail: Could not validate credentials
        '403':
          description: Forbidden - Insufficient permissions to delete actions
          content:
            application/json:
              example:
                detail: Insufficient permissions to delete actions
        '404':
          description: Action not found
          content:
            application/json:
              example:
                detail: Action with ID 999 not found
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                detail: 'Failed to delete action: Database connection error'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/mappings/:
    get:
      tags:
      - mappings
      summary: Resolve endpoint to action
      description: 'Resolve an API endpoint (path + method) to its corresponding action
        for authorization.


        **Authorization Middleware**: This endpoint is primarily used by authorization
        middleware

        to determine which action should be checked for a given API request.


        **Path Matching**: Supports exact matches and pattern matching with path parameters

        (e.g., `/api/v1/users/{user_id}` matches `/api/v1/users/123`).


        **Method Matching**: HTTP method must match exactly (case-sensitive).


        **Use Cases**:

        - Authorization middleware determining required permissions

        - API gateway integration for access control

        - Dynamic permission checking in applications

        - Audit logging of permission requirements'
      operationId: resolve_mapping_api_v1_mappings__get
      security:
      - HTTPBearer: []
      parameters:
      - name: path
        in: query
        required: true
        schema:
          type: string
          description: The API path to resolve (e.g., '/api/v1/users/123')
          title: Path
        description: The API path to resolve (e.g., '/api/v1/users/123')
        example: /api/v1/users/123
      - name: method
        in: query
        required: true
        schema:
          type: string
          description: The HTTP method
          title: Method
        description: The HTTP method
        example: GET
      responses:
        '200':
          description: Mapping found and resolved successfully
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/MappingResponse'
                - type: 'null'
                title: Response Resolve Mapping Api V1 Mappings  Get
              example:
                mapping_id: 1
                action: user:read
                path_pattern: /api/v1/users/{user_id}
                method: GET
                description: Get user profile information
        '404':
          description: No mapping found for the specified path and method
          content:
            application/json:
              example:
                detail: No mapping found for path '/api/v1/unknown' and method 'GET'
        '422':
          description: Validation error - Missing or invalid query parameters
          content:
            application/json:
              example:
                detail: Validation error
                errors:
                - loc:
                  - query
                  - path
                  msg: field required
                  type: value_error.missing
    post:
      tags:
      - mappings
      summary: Create endpoint-to-action mapping
      description: 'Create a new mapping between an API endpoint pattern and an action.


        **Authorization**: Requires admin privileges to create mappings.


        **Path Patterns**: Support exact paths and parameterized paths using curly
        braces

        (e.g., `/api/v1/users/{user_id}`, `/api/v1/groups/{group_name}/members`).


        **Method Mapping**: Each combination of path pattern and HTTP method can only

        be mapped to one action.


        **Action Reference**: The action must exist before creating a mapping. Use
        the

        actions API to create actions first.


        **Use Cases**:

        - Configure authorization for new API endpoints

        - Map existing endpoints to granular permissions

        - Set up fine-grained access control

        - Administrative configuration of API security'
      operationId: create_mapping_api_v1_mappings__post
      security:
      - HTTPBearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MappingCreateRequest'
      responses:
        '201':
          description: Mapping created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingDetailResponse'
              example:
                id: 1
                path_pattern: /api/v1/users/{user_id}
                method: GET
                action: user:read
                description: Get user profile information
                created_by: '12345678901'
                created_at: '2024-01-15T10:30:00Z'
        '400':
          description: Bad request - Invalid action ID
          content:
            application/json:
              example:
                detail: Action with ID 999 does not exist
        '401':
          description: Unauthorized - Invalid or missing JWT token
          content:
            application/json:
              example:
                detail: Could not validate credentials
        '403':
          description: Forbidden - Insufficient permissions to create mappings
          content:
            application/json:
              example:
                detail: Permission denied to create mappings
        '409':
          description: Conflict - Mapping already exists for this path and method
          content:
            application/json:
              example:
                detail: Mapping already exists for path '/api/v1/users/{user_id}'
                  and method 'GET'
        '422':
          description: Validation error - Invalid request data
          content:
            application/json:
              example:
                detail: Validation error
                errors:
                - loc:
                  - body
                  - method
                  msg: string does not match regex
                  type: value_error.regex
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                detail: 'Failed to create mapping: Database connection error'
  /api/v1/mappings/{mapping_id}:
    put:
      tags:
      - mappings
      summary: Update endpoint mapping
      description: 'Update an existing endpoint-to-action mapping.


        **Authorization**: Requires admin privileges to update mappings.


        **Partial Updates**: You can update individual fields (path_pattern, method,
        action_id, description)

        without affecting others. Provide only the fields you want to change.


        **Validation**: The new path pattern and method combination must not conflict

        with existing mappings (unless it''s the same mapping being updated).


        **Action Reference**: If updating action_id, the new action must exist.


        **Use Cases**:

        - Update endpoint patterns when API paths change

        - Change the action associated with an endpoint

        - Update descriptions for better documentation

        - Administrative maintenance of authorization configuration'
      operationId: update_mapping_api_v1_mappings__mapping_id__put
      security:
      - HTTPBearer: []
      parameters:
      - name: mapping_id
        in: path
        required: true
        schema:
          type: integer
          title: Mapping Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MappingUpdateRequest'
      responses:
        '200':
          description: Mapping updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingDetailResponse'
              example:
                id: 1
                path_pattern: /api/v1/users/{user_id}/profile
                method: GET
                action: user:read
                description: Get detailed user profile information
                created_by: '12345678901'
                created_at: '2024-01-15T10:30:00Z'
                updated_at: '2024-01-16T14:20:00Z'
        '400':
          description: Bad request - Invalid action ID or conflicting mapping
          content:
            application/json:
              example:
                detail: Action with ID 999 does not exist
        '401':
          description: Unauthorized - Invalid or missing JWT token
          content:
            application/json:
              example:
                detail: Could not validate credentials
        '403':
          description: Forbidden - Insufficient permissions to update mappings
          content:
            application/json:
              example:
                detail: Permission denied to update mapping 1
        '404':
          description: Mapping not found
          content:
            application/json:
              example:
                detail: Mapping with ID 999 not found
        '422':
          description: Validation error - Invalid request data
          content:
            application/json:
              example:
                detail: Validation error
                errors:
                - loc:
                  - body
                  - method
                  msg: string does not match regex
                  type: value_error.regex
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                detail: 'Failed to update mapping: Database connection error'
    delete:
      tags:
      - mappings
      summary: Delete endpoint mapping
      description: 'Delete an endpoint-to-action mapping from the system.


        **Authorization**: Requires admin privileges to delete mappings.


        **Impact**: Deleting a mapping will remove authorization requirements for
        the

        corresponding endpoint. Requests to that endpoint will no longer be checked

        against the associated action.


        **Idempotent Operation**: Attempting to delete a non-existent mapping returns

        success (204) for idempotent behavior.


        **Use Cases**:

        - Remove authorization for deprecated endpoints

        - Clean up unused or incorrect mappings

        - Administrative maintenance of authorization configuration


        **Warning**: Ensure the endpoint should no longer require authorization before

        deleting its mapping.'
      operationId: delete_mapping_api_v1_mappings__mapping_id__delete
      security:
      - HTTPBearer: []
      parameters:
      - name: mapping_id
        in: path
        required: true
        schema:
          type: integer
          title: Mapping Id
      responses:
        '204':
          description: Mapping deleted successfully
        '401':
          description: Unauthorized - Invalid or missing JWT token
          content:
            application/json:
              example:
                detail: Could not validate credentials
        '403':
          description: Forbidden - Insufficient permissions to delete mappings
          content:
            application/json:
              example:
                detail: Permission denied to delete mapping 1
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                detail: 'Failed to delete mapping: Database connection error'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/mappings/list:
    get:
      tags:
      - mappings
      summary: List all endpoint mappings
      description: 'Retrieve a list of all endpoint-to-action mappings with optional
        filtering.


        **Authorization**: All authenticated users can list mappings.


        **Filtering**: Use the action_filter parameter to show only mappings for

        a specific action (exact match on action name).


        **Management Interface**: This endpoint is designed for administrative

        interfaces and configuration management tools.


        **Use Cases**:

        - Display current authorization configuration

        - Administrative overview of endpoint mappings

        - Audit and compliance reporting

        - Integration with external configuration management

        - Troubleshooting authorization issues'
      operationId: list_mappings_api_v1_mappings_list_get
      security:
      - HTTPBearer: []
      parameters:
      - name: action_filter
        in: query
        required: false
        schema:
          anyOf:
          - type: string
          - type: 'null'
          description: Filter mappings by specific action name (exact match)
          title: Action Filter
        description: Filter mappings by specific action name (exact match)
        example: user:read
      responses:
        '200':
          description: Mappings retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MappingDetailResponse'
                title: Response List Mappings Api V1 Mappings List Get
              example:
              - id: 1
                path_pattern: /api/v1/users/{user_id}
                method: GET
                action: user:read
                description: Get user profile information
                created_by: '12345678901'
                created_at: '2024-01-15T10:30:00Z'
              - id: 2
                path_pattern: /api/v1/groups
                method: POST
                action: group:create
                description: Create new group
                created_by: '12345678901'
                created_at: '2024-01-15T11:00:00Z'
                updated_at: '2024-01-16T09:15:00Z'
        '401':
          description: Unauthorized - Invalid or missing JWT token
          content:
            application/json:
              example:
                detail: Could not validate credentials
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                detail: 'Failed to list mappings: Database connection error'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
components:
  schemas:
    ActionCreateRequest:
      properties:
        name:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[a-z0-9_:]+$
          title: Name
          description: Unique name for the action (lowercase letters, numbers, underscores,
            and colons only)
          example: user:read
        description:
          type: string
          maxLength: 500
          minLength: 1
          title: Description
          description: Human-readable description of the action's purpose
          example: Read user information
      type: object
      required:
      - name
      - description
      title: ActionCreateRequest
      description: Request model for creating a new action.
      example:
        description: Read user information
        name: user:read
    ActionListResponse:
      properties:
        actions:
          items:
            $ref: '#/components/schemas/app__routers__actions__ActionResponse'
          type: array
          title: Actions
          description: List of actions for the current page
        total:
          type: integer
          title: Total
          description: Total number of actions in the system
          example: 25
        skip:
          type: integer
          title: Skip
          description: Number of actions skipped (pagination offset)
          example: 0
        limit:
          type: integer
          title: Limit
          description: Maximum number of actions per page
          example: 50
      type: object
      required:
      - actions
      - total
      - skip
      - limit
      title: ActionListResponse
      description: Response model for paginated action lists.
      example:
        actions:
        - description: Read user information
          endpoint_count: 3
          id: 1
          name: user:read
        - description: Create new groups
          endpoint_count: 1
          id: 2
          name: group:create
        limit: 50
        skip: 0
        total: 25
    ActionUpdateRequest:
      properties:
        name:
          anyOf:
          - type: string
            maxLength: 100
            minLength: 1
            pattern: ^[a-zA-Z0-9_:-]+$
          - type: 'null'
          title: Name
          description: Updated name for the action
          example: user:read
        description:
          anyOf:
          - type: string
            maxLength: 500
            minLength: 1
          - type: 'null'
          title: Description
          description: Updated description of the action's purpose
          example: Read user information and profile data
      type: object
      title: ActionUpdateRequest
      description: Request model for updating an existing action.
      example:
        description: Read user information and profile data
        name: user:read
    AddMemberRequest:
      properties:
        subject:
          type: string
          pattern: ^[0-9]{11}$
          title: Subject
          description: User's CPF (Brazilian tax ID) to add to the group
          example: '12345678901'
      type: object
      required:
      - subject
      title: AddMemberRequest
      description: Request model for adding a member to a group.
      example:
        subject: '12345678901'
    GroupCreateRequest:
      properties:
        name:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[a-z0-9_:]+$
          title: Name
          description: Unique name for the group (lowercase letters, numbers, underscores,
            and colons only)
          example: engineering_team:backend
        description:
          type: string
          maxLength: 500
          minLength: 1
          title: Description
          description: Human-readable description of the group's purpose
          example: Engineering team with access to development resources
      type: object
      required:
      - name
      - description
      title: GroupCreateRequest
      description: Request model for creating a new group.
      example:
        description: Engineering team with access to development resources
        name: engineering_team:backend
    GroupMemberResponse:
      properties:
        subject:
          type: string
          title: Subject
          description: User's CPF (Brazilian tax ID)
          example: '12345678901'
        display_name:
          anyOf:
          - type: string
          - type: 'null'
          title: Display Name
          description: User's display name if available
          example: "Jo\xE3o Silva"
        joined_at:
          type: string
          title: Joined At
          description: ISO timestamp when the user joined the group
          example: '2024-01-15T10:30:00Z'
        added_by:
          anyOf:
          - type: string
          - type: 'null'
          title: Added By
          description: CPF of the user who added this member
          example: '98765432109'
      type: object
      required:
      - subject
      - joined_at
      title: GroupMemberResponse
      description: Response model for a group member.
      example:
        added_by: '98765432109'
        display_name: "Jo\xE3o Silva"
        joined_at: '2024-01-15T10:30:00Z'
        subject: '12345678901'
    GroupResponse:
      properties:
        id:
          type: integer
          title: Id
          description: Unique identifier for the group
          example: 1
        name:
          type: string
          title: Name
          description: Group name
          example: engineering_team:backend
        description:
          type: string
          title: Description
          description: Group description
          example: Engineering team with access to development resources
        created_by:
          anyOf:
          - type: string
          - type: 'null'
          title: Created By
          description: CPF of the user who created this group
          example: '12345678901'
        created_at:
          type: string
          title: Created At
          description: ISO timestamp when the group was created
          example: '2024-01-15T10:30:00Z'
      type: object
      required:
      - id
      - name
      - description
      - created_at
      title: GroupResponse
      description: Response model for group information.
      example:
        created_at: '2024-01-15T10:30:00Z'
        created_by: '12345678901'
        description: Engineering team with access to development resources
        id: 1
        name: engineering_team:backend
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    MappingCreateRequest:
      properties:
        path_pattern:
          type: string
          maxLength: 255
          minLength: 1
          title: Path Pattern
          description: URL path pattern (supports wildcards and path parameters)
          example: /api/v1/users/{user_id}
        method:
          type: string
          pattern: ^(GET|POST|PUT|PATCH|DELETE|HEAD|OPTIONS)$
          title: Method
          description: HTTP method
          example: GET
        action_id:
          type: integer
          exclusiveMinimum: 0.0
          title: Action Id
          description: ID of the action to map to this endpoint
          example: 1
        description:
          anyOf:
          - type: string
            maxLength: 500
          - type: 'null'
          title: Description
          description: Optional description of this mapping
          example: Get user profile information
      type: object
      required:
      - path_pattern
      - method
      - action_id
      title: MappingCreateRequest
      description: Request model for creating a new endpoint-to-action mapping.
      example:
        action_id: 1
        description: Get user profile information
        method: GET
        path_pattern: /api/v1/users/{user_id}
    MappingDetailResponse:
      properties:
        id:
          type: integer
          title: Id
          description: Unique identifier of the mapping
          example: 1
        path_pattern:
          type: string
          title: Path Pattern
          description: URL path pattern
          example: /api/v1/users/{user_id}
        method:
          type: string
          title: Method
          description: HTTP method
          example: GET
        action:
          type: string
          title: Action
          description: Action name
          example: user:read
        description:
          anyOf:
          - type: string
          - type: 'null'
          title: Description
          description: Mapping description
          example: Get user profile information
        created_by:
          anyOf:
          - type: string
          - type: 'null'
          title: Created By
          description: CPF of the user who created this mapping
          example: '12345678901'
        created_at:
          type: string
          title: Created At
          description: ISO timestamp when the mapping was created
          example: '2024-01-15T10:30:00Z'
        updated_at:
          anyOf:
          - type: string
          - type: 'null'
          title: Updated At
          description: ISO timestamp when the mapping was last updated
          example: '2024-01-16T14:20:00Z'
      type: object
      required:
      - id
      - path_pattern
      - method
      - action
      - created_at
      title: MappingDetailResponse
      description: Detailed response model for mapping information.
      example:
        action: user:read
        created_at: '2024-01-15T10:30:00Z'
        created_by: '12345678901'
        description: Get user profile information
        id: 1
        method: GET
        path_pattern: /api/v1/users/{user_id}
        updated_at: '2024-01-16T14:20:00Z'
    MappingResponse:
      properties:
        mapping_id:
          type: integer
          title: Mapping Id
          description: Unique identifier of the mapping
          example: 1
        action:
          type: string
          title: Action
          description: Action name mapped to this endpoint
          example: user:read
        path_pattern:
          type: string
          title: Path Pattern
          description: URL path pattern that matched
          example: /api/v1/users/{user_id}
        method:
          type: string
          title: Method
          description: HTTP method
          example: GET
        description:
          anyOf:
          - type: string
          - type: 'null'
          title: Description
          description: Mapping description
          example: Get user profile information
      type: object
      required:
      - mapping_id
      - action
      - path_pattern
      - method
      title: MappingResponse
      description: Response model for mapping resolution (used by authorization middleware).
      example:
        action: user:read
        description: Get user profile information
        mapping_id: 1
        method: GET
        path_pattern: /api/v1/users/{user_id}
    MappingUpdateRequest:
      properties:
        path_pattern:
          anyOf:
          - type: string
            maxLength: 255
            minLength: 1
          - type: 'null'
          title: Path Pattern
          description: Updated URL path pattern
          example: /api/v1/users/{user_id}
        method:
          anyOf:
          - type: string
            pattern: ^(GET|POST|PUT|PATCH|DELETE|HEAD|OPTIONS)$
          - type: 'null'
          title: Method
          description: Updated HTTP method
          example: GET
        action_id:
          anyOf:
          - type: integer
            exclusiveMinimum: 0.0
          - type: 'null'
          title: Action Id
          description: Updated action ID
          example: 2
        description:
          anyOf:
          - type: string
            maxLength: 500
          - type: 'null'
          title: Description
          description: Updated description
          example: Get detailed user profile information
      type: object
      title: MappingUpdateRequest
      description: Request model for updating an existing endpoint-to-action mapping.
      example:
        description: Get detailed user profile information
        path_pattern: /api/v1/users/{user_id}/profile
    MembershipResponse:
      properties:
        status:
          type: string
          title: Status
          description: Status of the membership operation
          example: member_added
        group:
          type: string
          title: Group
          description: Name of the group
          example: engineering_team:backend
        subject:
          type: string
          title: Subject
          description: CPF of the user involved in the operation
          example: '12345678901'
      type: object
      required:
      - status
      - group
      - subject
      title: MembershipResponse
      description: Response model for membership operations.
      example:
        group: engineering_team:backend
        status: member_added
        subject: '12345678901'
    PaginatedResponse_RoleResponse_:
      properties:
        items:
          items:
            $ref: '#/components/schemas/RoleResponse'
          type: array
          title: Items
          description: List of items for the current page
        total:
          type: integer
          minimum: 0.0
          title: Total
          description: Total number of items available
          example: 150
        skip:
          type: integer
          minimum: 0.0
          title: Skip
          description: Number of items skipped (offset)
          example: 0
        limit:
          type: integer
          maximum: 100.0
          minimum: 1.0
          title: Limit
          description: Maximum number of items returned
          example: 50
        has_more:
          type: boolean
          title: Has More
          description: Whether there are more items available
          example: true
      type: object
      required:
      - items
      - total
      - skip
      - limit
      - has_more
      title: PaginatedResponse[RoleResponse]
    RoleActionRequest:
      properties:
        action_name:
          type: string
          pattern: ^[a-z0-9_:]+$
          title: Action Name
          description: Name of the action to assign/remove (lowercase letters, numbers,
            underscores, and colons only)
          example: user:read
      type: object
      required:
      - action_name
      title: RoleActionRequest
      description: Request model for role-action operations.
      example:
        action_name: user:read
    RoleActionResponse:
      properties:
        status:
          type: string
          title: Status
          description: Status of the operation
          example: action_assigned
        role:
          type: string
          title: Role
          description: Role name
          example: data_analyst:read
        action:
          type: string
          title: Action
          description: Action name
          example: user:read
      type: object
      required:
      - status
      - role
      - action
      title: RoleActionResponse
      description: Response model for role-action operations.
      example:
        action: user:read
        role: data_analyst:read
        status: action_assigned
    RoleAssignRequest:
      properties:
        role_name:
          type: string
          pattern: ^[a-z0-9_:]+$
          title: Role Name
          description: Name of the role to assign to the group (lowercase letters,
            numbers, underscores, and colons only)
          example: data_analyst:read
      type: object
      required:
      - role_name
      title: RoleAssignRequest
      description: Request model for assigning a role to a group.
      example:
        role_name: data_analyst:read
    RoleAssignmentResponse:
      properties:
        status:
          type: string
          title: Status
          description: Status of the role assignment operation
          example: success
        group:
          type: string
          title: Group
          description: Name of the group the role was assigned to
          example: engineering_team:backend
        role:
          type: string
          title: Role
          description: Name of the role that was assigned
          example: data_analyst:read
      type: object
      required:
      - status
      - group
      - role
      title: RoleAssignmentResponse
      description: Response model for role assignment operations.
      example:
        group: engineering_team:backend
        role: data_analyst:read
        status: success
    RoleCreateRequest:
      properties:
        name:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[a-z0-9_:]+$
          title: Name
          description: Unique name for the role (lowercase letters, numbers, underscores,
            and colons only)
          example: data_analyst:read
        description:
          type: string
          maxLength: 500
          minLength: 1
          title: Description
          description: Human-readable description of the role's purpose and permissions
          example: Data analysts with read access to analytics dashboards
      type: object
      required:
      - name
      - description
      title: RoleCreateRequest
      description: Request model for creating a new role.
      example:
        description: Data analysts with read access to analytics dashboards
        name: data_analyst:read
    RoleResponse:
      properties:
        id:
          type: integer
          title: Id
          description: Unique identifier for the role
          example: 1
        name:
          type: string
          title: Name
          description: Role name
          example: data_analyst:read
        description:
          type: string
          title: Description
          description: Role description
          example: Data analysts with read access to analytics dashboards
        created_by:
          anyOf:
          - type: string
          - type: 'null'
          title: Created By
          description: CPF of the user who created this role (null for system roles)
          example: '12345678901'
        created_at:
          anyOf:
          - type: string
          - type: 'null'
          title: Created At
          description: ISO timestamp when the role was created (null for system roles)
          example: '2024-01-15T10:30:00Z'
      type: object
      required:
      - id
      - name
      - description
      title: RoleResponse
      description: Response model for role information.
      example:
        created_at: '2024-01-15T10:30:00Z'
        created_by: '12345678901'
        description: Data analysts with read access to analytics dashboards
        id: 1
        name: data_analyst:read
    UserResponse:
      properties:
        id:
          type: integer
          title: Id
          description: Unique identifier for the user
          example: 1
        cpf:
          type: string
          pattern: ^[0-9]{11}$
          title: Cpf
          description: "User's CPF (Cadastro de Pessoa F\xEDsica) - Brazilian tax\
            \ ID"
          example: '12345678901'
        display_name:
          anyOf:
          - type: string
          - type: 'null'
          title: Display Name
          description: User's display name from JWT token (name, given_name, or email)
          example: "Jo\xE3o Silva"
        groups:
          items:
            type: string
          type: array
          title: Groups
          description: List of groups the user belongs to
          example:
          - engineering_team:backend
          - data_analysts:read
        roles:
          items:
            type: string
          type: array
          title: Roles
          description: List of roles assigned to the user (both direct and through
            groups)
          example:
          - superadmin
          - data-analyst
      type: object
      required:
      - id
      - cpf
      title: UserResponse
      description: Response model for user information.
      example:
        cpf: '12345678901'
        display_name: "Jo\xE3o Silva"
        groups:
        - engineering_team:backend
        - data_analysts:read
        id: 1
        roles:
        - superadmin
        - data-analyst
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
      - loc
      - msg
      - type
      title: ValidationError
    app__routers__actions__ActionResponse:
      properties:
        id:
          type: integer
          title: Id
          description: Unique identifier for the action
          example: 1
        name:
          type: string
          title: Name
          description: Action name
          example: user:read
        description:
          anyOf:
          - type: string
          - type: 'null'
          title: Description
          description: Action description
          example: Read user information
        endpoint_count:
          type: integer
          title: Endpoint Count
          description: Number of API endpoints mapped to this action
          default: 0
          example: 3
      type: object
      required:
      - id
      - name
      title: ActionResponse
      description: Response model for action information.
      example:
        description: Read user information
        endpoint_count: 3
        id: 1
        name: user:read
    app__routers__roles__ActionResponse:
      properties:
        id:
          type: integer
          title: Id
          description: Unique identifier for the action
          example: 1
        name:
          type: string
          title: Name
          description: Action name
          example: user:read
        description:
          anyOf:
          - type: string
          - type: 'null'
          title: Description
          description: Action description
          example: Read user information
      type: object
      required:
      - id
      - name
      title: ActionResponse
      description: Response model for action information.
      example:
        description: Read user information
        id: 1
        name: user:read
  securitySchemes:
    HTTPBearer:
      type: http
      scheme: bearer
tags:
- name: health
  description: Service health and readiness checks
- name: users
  description: User management operations. Users are automatically created from JWT
    tokens.
- name: groups
  description: Group management operations. Groups organize users and can have roles
    assigned.
- name: memberships
  description: Group membership management. Assign and remove users from groups.
- name: roles
  description: Role management operations. Roles define permissions that can be assigned
    to users or groups.
- name: actions
  description: Action management operations. Actions define the granular permissions
    available in the system.
- name: mappings
  description: API endpoint to action mapping configuration. Maps HTTP endpoints to
    authorization actions.
servers:
- url: https://services.pref.rio/heimdall-admin
  description: Production server
- url: https://services.staging.app.dados.rio/heimdall-admin
  description: Staging server
